<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--数据库表的字段名称和实体类属性名称不一样，则不能自动封装数据
    1.可以通过其别名的方式，使其能够被封装， 缺点：每次查询都要定义别名
    2.可以通过设置sql片段, 然后通过include 的方式使用，缺点：不灵活
    3. resultMap: id 唯一标识， type，映射的类型，优点：灵活
        (1)定义resultMap标签
        (2)在<select>中使用resultMap 替换resultType属性
    -->
<!--    sql片段-->
<!--<mapper namespace="com.example.mapper.BrandMapper">-->
<!--    <sql id="brand_column">-->
<!--        id, brand_name as brandName, company_name as companyName, ordered, description, status-->
<!--    </sql>-->

<!--    <select id="selectAll" resultMap="brandResultMap">-->
<!--        select  <include refid="brand_column"></include>-->
<!--        from tb_brand;-->
<!--    </select>-->
<!--</mapper>-->

<!--resultMap-->
<mapper namespace="com.example.mapper.BrandMapper">
<!--    sql片段-->
<!--<sql id="brand_column">-->
<!--    id, brand_name as brandName, company_name as companyName, ordered, description, status-->
<!--</sql>-->
    <resultMap id="brandResultMap" type="brand">
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>

    <select id="selectAll" resultMap="brandResultMap">
<!--        <include refid="brand_column"></include>-->
        select *
        from tb_brand;
    </select>

<!--    参数占位符
        1. #{}: 会将其替换为？，为了防止sql注入
        2. ${}: 拼sql，会存在sql注入
        3. 使用时机：
            * 参数传递时：#{}
            * 表名/列名不确定是：${}
        参数类型：parameterType="int"
        特殊符号处理：
            * 转义字符
            * cData区
            <![CDATA[
                <
            ]]>
        -->
<!--    <select id="selectById" resultMap="brandResultMap" parameterType="int">-->
<!--        select *-->
<!--        from tb_brand-->
<!--        where id = #{id};-->
<!--    </select>-->
<!--    动态条件查询
        1. 可以加一个恒等式，防止第一个条件不满足
        2. use <where></where>
-->

<!--    单条件动态查询-->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <if test = "status != null">
                and status = #{status}
            </if>
            <if test = "companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test = "brandName != null and brandName != ''">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>


    <select id="selectBySingleCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
        <choose>
            <when test = "status != null">
                status = #{status}
            </when>
            <when test = "companyName != null and companyName != ''">
                company_name like #{companyName}
            </when>
            <when test = "brandName != null and brandName != ''">
                brand_name like #{brandName}
            </when>
        </choose>
        </where>
    </select>
<!--    设置useGeneratedKeys="true" keyProperty="id"
        可以自动返回自加的id

-->

    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand(brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
    </insert>
<!--如果不用dynamic sql有的字段为空，则会设置为null-->
    <update id="update">
        update tb_brand
        <set>
        <if test = "status != null">
            status = #{status},
        </if>
        <if test = "ordered != null">
            ordered = #{ordered},
        </if>
        <if test = "companyName != null and companyName != ''">
            company_name = #{companyName},
        </if>
        <if test = "brandName != null and brandName != ''">
            brand_name = #{brandName},
        </if>
        <if test = "description != null and description  != ''">
            description = #{description},
        </if>
    </set>
        where id = #{id};
    </update>


    <delete id="deleteById">
        delete from tb_brand where id = #{id};
    </delete>
<!--    -->
<!--    mybatis会将数组参数，封装为map的集合
            1. 数组的key是array
            2. 在函数中，用@Param 设置为一个名字
            -->
    <delete id="deleteByIds">
        delete from tb_brand where id in 
        <foreach collection="array" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>

</mapper>